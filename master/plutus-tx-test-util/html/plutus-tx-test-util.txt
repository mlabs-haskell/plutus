-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Test utilities for Plutus Tx
@package plutus-tx-test-util
@version 0.1.0.0

module PlutusTx.Test.Util.Compiled
type Program = Program NamedDeBruijn DefaultUni DefaultFun ()
type Term = Term NamedDeBruijn DefaultUni DefaultFun ()

-- | Remove the textual names from a NamedDeBruijn term
toAnonDeBruijnTerm :: Term -> Term DeBruijn DefaultUni DefaultFun ()
toAnonDeBruijnProg :: Program NamedDeBruijn DefaultUni DefaultFun () -> Program DeBruijn DefaultUni DefaultFun ()

-- | Given a DeBruijn-named term, give every variable the name "v". If we
--   later call unDeBruijn, that will rename the variables to things like
--   "v123", where 123 is the relevant de Bruijn index.
toNamedDeBruijnTerm :: Term DeBruijn DefaultUni DefaultFun () -> Term NamedDeBruijn DefaultUni DefaultFun ()

-- | Just extract the body of a program wrapped in a
--   <tt>CompiledCodeIn</tt>. We use this a lot.
compiledCodeToTerm :: CompiledCodeIn DefaultUni DefaultFun a -> Term

-- | Lift a Haskell value to a PLC term. The constraints get a bit out of
--   control if we try to do this over an arbitrary universe.
haskellValueToTerm :: Lift DefaultUni a => a -> Term

-- | Just run a term to obtain an <a>EvaluationResult</a> (used for tests
--   etc.)
unsafeRunTermCek :: Term -> EvaluationResult Term

-- | Just run a term.
runTermCek :: Term -> (Either (CekEvaluationException NamedDeBruijn DefaultUni DefaultFun) Term, [Text])

-- | Evaluate a PLC term and check that the result matches a given Haskell
--   value (perhaps obtained by running the Haskell code that the term was
--   compiled from). We evaluate the lifted Haskell value as well, because
--   lifting may produce reducible terms. The function is polymorphic in
--   the comparison operator so that we can use it with both HUnit
--   Assertions and QuickCheck Properties.
cekResultMatchesHaskellValue :: Lift DefaultUni a => Term -> (EvaluationResult Term -> EvaluationResult Term -> b) -> a -> b
